<pre class='metadata'>
Title: BSV DID Method
Shortname: did-BSV
Level: 1
Status: w3c/CG-DRAFT
Group: Credentials Community Group
URL: https://repzip.github.io/did-BSV/

Editor: William Devine, https://www.repzip.com/


Abstract: The BSV DID method specification conforms to the requirements specified in the <a href="https://w3c-ccg.github.io/did-spec/">DID specification</a> currently published by the W3C Credentials Community Group. For more information about DIDs and DID method specifications, please see the <a href="https://github.com/WebOfTrustInfo/rwot7/blob/master/topics-and-advance-readings/did-primer.md">DID Primer</a>.

</pre>

Introduction {#intro}
=====================

The BitcoinSV DID method (did:bsv) supports DIDs on the public
BitcoinSV [=blockchain=] (BSV). The BSV method has minimal design
goals: a DID trust anchor based on the BitcoinSV blockchain, updates
publicly visible and auditable via Bitcoin transactions, and optionally,
additional DID Document information referenced in the transaction
OP_RETURN data field. No Personal Identifiable Information (PII)
needs to be placed on the immutable blockchain so the system can allow 
for private usage out of the box. 

The BSV DID Methodology allows for pseudo-anonymous identities, web-of-trust style webs of identity, and
absolute mimimal personal information disclosure. 

It also allows for users to publicly link PII to certain DID:BSV identifiers as a public profile. 
Allowing users to develop public identifiers and thereby creating public reputations. We foresee 
users controlling multiple DID:BSV Identities within the same Wallet System. Some public, some private.

The system is flexible and has been designed to adhere to the Law. 

The DID:BSV documents are designed to be portable and easy to verify. We utilize the SPV methodology 
proposed in the Bitcoin Whitepaper to accomplish that task.


Terminology {#terminology}
===========

<dfn>block</dfn>: A data structure that contains one or more [=ledger=] events.

<dfn>blockchain</dfn>: A [=ledger=] containing a series of [=block=]s
where the ordering of the blocks can be mathematically proven to be
correct.

<dfn>consensus algorithm</dfn>: An algorithm that enables multiple nodes
in a network to make a decision in a deterministic fashion.

<dfn>continuation [=DID=] document</dfn>: A continuation [=DID=] document is an optional document external to the Bitcoin transaction providing
additional DID document keys, ...

<dfn>cryptographic ledger</dfn>: A method of recording changes in a
state machine where the accuracy of the ledger can be mathematically
proven to be correct.

<dfn>DID</dfn>: a distributed identitfier.

<dfn>decentralized system</dfn>: A system in which lower level
components operate on local information to accomplish global goals. For
example, an ant colony is a decentralized system as there is no central
control determining when food must be collected or how new tunnels
should be excavated.

<dfn>decentralized ledger</dfn>: A [=cryptographic ledger=] that uses a
[=consensus algorithm=] that enables a network of ledger nodes to come
to consensus in a decentralized yet deterministic fashion.

<dfn>SPV</dfn>: Simple Payment Verification, as covered by the Bitcoin Whitepaper.

<dfn>Metanet</dfn>: <a href="https://nchain.com/app/uploads/2019/06/The-Metanet-Technical-Summary-v1.0.pdf"> Metanet Specification Document</a>

<dfn>HD Wallet</dfn>: TODO.

<dfn>outpoint</dfn>: [=outpoint index=].

<dfn>outpoint index</dfn>: A bitcoin transaction output. Also called outpoint (without index). 
This terminology is chosen for consistency with <a href="https://github.com/bitcoin/bips/blob/master/bip-0136.mediawiki">BIP-136</a>.



Basic Concepts {#concepts}
==============

SPV Proof {#SPV}
--------------

DID:BSV identifiers use the Public Key (Base 58) to refer to the , 




1. The BSV Method Specification has chosen to use the Public Key in Base58 encoding as the unique identifier for each DID document. 




2. The BSV Method Specification uses the Metanet specifications with regards to formating the transactions.



Structuring DID transactions to be interpreted as Metanet nodes, and
using digital signatures to create edges as links between them. This allows a graph to be
reconstructed off-chain, by anybody, using on-chain data and a standardised protocol.
This graph then allows on-chain data to be usefully related, handled and distributed by network peers
in an internet-like model where trust is decentralised, transparency increased, and data integrity,
authenticity and validity secured by the Blockchain and proof-of-work mining.







BSV DID Format {#format}
---------------

BSV DIDs have the following format:

<pre>
      BSV-did        = "did:bsv:" BSV-identifier
                       [ ";" did-service ] [ "/" did-path ]
                       [ "?" did-query ] [ "#" did-fragment ]
      BSV-identifier = Base 58 Public Key
</pre>


BSV DID construction {#BSV_construction}
---------------------

𝑇𝑥𝐼𝐷𝑛𝑜𝑑𝑒
Inputs Outputs
< 𝑆𝑖𝑔 𝑃𝑝𝑎𝑟𝑒𝑛𝑡> <𝑃𝑝𝑎𝑟𝑒𝑛𝑡> OP_RETURN <Metanet Flag> <𝑃𝑛𝑜𝑑𝑒> <𝑇𝑥𝐼𝐷𝑝𝑎𝑟𝑒𝑛𝑡> 


You should familiarise yourself with the concept of the Metanet and how the graph is constructed.

VOUT - 0 

OP_FALSE OP_RETURN 'meta' (or possibly 'did' tbd) Pubkey (Parent Tx - If not a Root DID) 

VOUT - 1

OP_PUSHDATA 'DID DOC' OP_DROP




Default Capabilities {#default_cap}
--------------------
If an BSV DID's transaction does not contain an OP_RETURN field, a DID resolver must generate the DID Document from the transaction itself. Specifically, it grants the transaction signing key the following capabilities:

1. Authentication
2. Sign Verifiable Credentials


<div class="example" heading="Detailed example of default capabilities">
<pre>
{
	"@context": "https://www.w3.org/ns/did/v1",
	"id": "did:bsv:zybgLWJTotnpmWxgaySoUFw6dcz1DX7W8uAY2j7LpaSP",
	"authentication": [
		{
			"id": "did:bsv:zybgLWJTotnpmWxgaySoUFw6dcz1DX7W8uAY2j7LpaSP",
			"type": "Secp256k1VerificationKey2018",
			"controller": "did:bsv:zybgLWJTotnpmWxgaySoUFw6dcz1DX7W8uAY2j7LpaSP",
			"publicKeyHex": "035d69e411576a93b20de3e3b834acfcd5de8be8875e74ab38d2f8109bf5f3f0ac"
		}
	],
	"service": [
		{
			"id": "did:bsv:zybgLWJTotnpmWxgaySoUFw6dcz1DX7W8uAY2j7LpaSP",
			"type": "VerifiableCredentialService",
			"serviceEndpoint": "https://identity.law/vc/"
		}
	],
	"created": 1597518133664,
	"updated": 1597518133664,
	"proofs": []
}
</pre>
</div>




Continuation DID Documents {#continuation}
--------------------------



The Metanet {#metanet}
============


	Version control - If there are two nodes with the same public key, then we interpret the node
	with transaction ID with greatest proof of work as the latest version of that node.
	If the nodes are in different blocks, then this can be checked with the block height. For
	transactions in the same block, this is determined by the Topological Transaction Ordering Rule
	(TTOR).

	Permissioning - A child of a node can only be created if the owner of the public key 𝑃𝑛𝑜𝑑𝑒 signs
	the transaction input in the creation of a child node. Therefore 𝑃𝑛𝑜𝑑𝑒 not only represents the
	address of a node but also the permission to create a child node. This is analogous to a standard
	bitcoin transaction – a public key is not only an address but also the permission associated with
	that address.

	Note that since the signature of the parent node appears in a UXTO unlocking script it is validated
	through the standard miner validation process at the point when the transaction is accepted to
	the network. This means that the permission to create a child node is validated by the bitcoin 



Operations {#operations}
==========


Creating a DID {#creating}
--------------

	Using OP_RETURN alone
	The diagram below shows a Metanet node containing all content data within a single OP_RETURN
	output.
	Figure 4. A Metanet node using a single OP_RETURN.
	The file name and file type are included as optional attributes in the OP_RETURN output, followed
	by the actual payload of file data itself.
	Any set of attributes and schemas may be included depending on the file type or use case to encode
	the relevant metadata, and the file data may be split into several discrete chunks within the output
	itself.
	𝑇𝑥𝐼𝐷𝑛𝑜𝑑𝑒
	Inputs Outputs
	< 𝑆𝑖𝑔 𝑃𝑝𝑎𝑟𝑒𝑛𝑡> <𝑃𝑝𝑎𝑟𝑒𝑛𝑡>
	OP_RETURN <𝑀𝑒𝑡𝑎𝑛𝑒𝑡 𝐹𝑙𝑎𝑔> <𝑃𝑛𝑜𝑑𝑒> <𝑇𝑥𝐼𝐷𝑝𝑎𝑟𝑒𝑛𝑡>
	<file_name> <file_type>
	<file_data>



The Metanet


Using OP_RETURN and OP_DROP

	The diagram below shows a Metanet node in which the file data has been split across two spendable
	outputs in OP_DROP statements. This insertion method may be used if a large file is to be
	embedded, or simply if the user wishes to create fewer provably unspendable outputs.

	Figure 5. A Metanet node using an OP_RETURN in conjunction with OP_PUSHDATA.

	In this scenario, we have assumed it is sensible to include all the metadata and attributes within the
	OP_RETURN output, which then acts as a ‘header’ for the file.

	However, it is just as plausible that additional attributes could be included in the spendable outputs
	if, for example, there were attributes that applied to <file_data 1> but not <file_data 2>.
	Note that we have even included an additional identifier <sub-protocol identifier> to signify the use
	of a specific hypothetical data-insertion protocol. We see that the sub-protocol fits within the Metanet
	protocol itself, and can be considered an overlay protocol on top of the umbrella protocol that is the
	Metanet.





Reading a DID {#reading}
-------------

1. Extract the Public Key from the BSV DID 
2. Look up the Metanet Graph for the latest corresponding Transaction.
    * no: this is the latest version of the DID. From this we can construct the DID Description (described below)
    * yes: keep following transaction chain until the latest with an unspent [=outpoint=] is found

See <a
href="https://github.com/WebOfTrustInfo/rebooting-the-web-of-trust-spring2018/pull/74">
BSV resolver</a> for additional details. TODO: merge in


Updating a DID {#updating}
--------------



Deleting a DID {#deleting}
--------------



Versioning {#versioning}
==========

Version of this Specification

[Define how this spec will be versioned. This SHOULD be by using the
bikeshed versioning mechanism.]

Version of the JSON-LD Context

[Define how your JSON-LD context will be versioned. This MUST use the
mechanism defined in the DID spec.]


Security Considerations {#security}
=======================

Requirements from Method Spec Template definition: 

<pre> 

At least the following forms of attack MUST be considered:
eavesdropping, replay, message insertion, deletion, modification,
impersonation, and man-in-the-middle.

Potential denial of service attacks MUST be identified as well.

If the protocol incorporates cryptographic protection mechanisms, it
should be clearly indicated which portions of the data are protected and
what the protections are (i.e., integrity only, confidentiality, and/or
endpoint authentication, etc.).

Some indication should also be given to what sorts of attacks the
cryptographic protection is susceptible.

Data which should be held secret (keying material, random seeds, etc.)
should be clearly labeled.

If the technology involves authentication, particularly user-host
authentication, the security of the authentication method MUST be
clearly specified.

Residual risks (such as the risks from compromise in a related protocol,
incorrect implementation, or cipher) after threat mitigation has been
deployed.

This section MUST provide integrity protection and update authentication
for all operations required by Section 7 of this specification (DID
Operations).
</pre>

Binding of Identity
-------------------

Authentication Service Endpoints
--------------------------------

Non-Repudiation
---------------

Notification of DDO Changes
---------------------------

Key and Signature Expiration
----------------------------

Key Revocation and Recovery
---------------------------

Privacy Considerations
======================


DDO Correlation Risks
---------------------

Herd Privacy
------------

Appendix A: Examples
====================

Typical Full DID Document
--------------------

The following is a complete example of a typical BSV DID Document with MetanetSPV Proof:

<div class="example" heading="Typical BSV DID Document">
<pre>

{
	"@context": "https://www.w3.org/ns/did/v1",
	"id": "did:bsv:zybgLWJTotnpmWxgaySoUFw6dcz1DX7W8uAY2j7LpaSP",
	"authentication": [
		{
			"id": "did:bsv:zybgLWJTotnpmWxgaySoUFw6dcz1DX7W8uAY2j7LpaSP",
			"type": "Secp256k1VerificationKey2018",
			"controller": "did:bsv:zybgLWJTotnpmWxgaySoUFw6dcz1DX7W8uAY2j7LpaSP",
			"publicKeyHex": "035d69e411576a93b20de3e3b834acfcd5de8be8875e74ab38d2f8109bf5f3f0ac"
		}
	],
	"service": [
		{
			"id": "did:bsv:zybgLWJTotnpmWxgaySoUFw6dcz1DX7W8uAY2j7LpaSP",
			"type": "VerifiableCredentialService",
			"serviceEndpoint": "https://identity.law/vc/"
		}
	],
	"created": 1597518133664,
	"updated": 1597518133664,
	"proofs": [
		{
			"type": "MetanetSPV",
			"proofPurpose": "assertionMethod",
			"created": 1597521445449,
			"txid": "32af205fb3e95b57e004a10f90fb67991c4809e35c0c5c8911e694f5ebe02634",
			"rawtx": "0100000001a1e99e35e19c46b823e56e100a49bc06bac6a032cf840927cad6706b2e9db758020000006b4830450221009a90fdd61ed901ed84c4bf94e157874026c140b1008bec00aa3204a0e4b57534022064558a1f3bf2967ea3a95de415586479f487ce33296826672501945e37be75b24121035d69e411576a93b20de3e3b834acfcd5de8be8875e74ab38d2f8109bf5f3f0acffffffff0300000000000000008b006a046d657461423033356436396534313135373661393362323064653365336238333461636663643564653862653838373565373461623338643266383130396266356633663061634035386237396432653662373064366361323730393834636633326130633662613036626334393061313036656535323362383436396365313335396565396131b80b000000000000fd5f024d42027b2240636f6e74657874223a2268747470733a2f2f7777772e77332e6f72672f6e732f6469642f7631222c226964223a226469643a6273763a7a7962674c574a546f746e706d5778676179536f5546773664637a314458375738754159326a374c70615350222c2261757468656e7469636174696f6e223a5b7b226964223a226469643a6273763a7a7962674c574a546f746e706d5778676179536f5546773664637a314458375738754159326a374c70615350222c2274797065223a22536563703235366b31566572696669636174696f6e4b657932303138222c22636f6e74726f6c6c6572223a226469643a6273763a7a7962674c574a546f746e706d5778676179536f5546773664637a314458375738754159326a374c70615350222c227075626c69634b6579486578223a22303335643639653431313537366139336232306465336533623833346163666364356465386265383837356537346162333864326638313039626635663366306163227d5d2c2273657276696365223a5b7b226964223a226469643a6273763a7a7962674c574a546f746e706d5778676179536f5546773664637a314458375738754159326a374c70615350222c2274797065223a2256657269666961626c6543726564656e7469616c53657276696365222c2273657276696365456e64706f696e74223a2268747470733a2f2f6964656e746974792e6c61772f76632f227d5d2c2263726561746564223a313539373531383133333636342c2275706461746564223a313539373531383133333636347d7576a914dfa51c199a4adbbf822dd3767730786688b8ab1e88ac39710000000000001976a914dfa51c199a4adbbf822dd3767730786688b8ab1e88ac00000000",
			"blockHash": "000000000000000001895ecb29fab985c61a9bd08cd84f0f9fdab61a545b8f8f",
			"merkleRoot": "b66b55b6409dd54ecc861e35423bd51aee538cf145436d2ed29417bdb4001e0d",
			"branches": [
				{	"hash": "bd7c70297b25dab2424e5f84d5ff3b7db6a7eaa1515c1adbd76b60863fe18cdd",	"pos": "L"},
				{   "hash": "ba3820fc6e32f091f7028eccbdb307ae1d017f0f5193f80d4d7684de45974c87", "pos": "L"},
				{   "hash": "00f70b19c41569e481d24486b1f278c2f90c9ee84a05c9dc7b30a288642577be", "pos": "L"},
				{	"hash": "cdeb1a318b9d85a99cc608697855b3fb14f1dd2cd49c89f7ab9692adba35f6a1", "pos": "R"},
				{  	"hash": "06c8ba6fdb70862e5e13f10c8e788e47a360941e7da062b2233c8ae76e8dab43",	"pos": "R"},
				{ 	"hash": "57f107d7b4e7ebe7750d1c8dfba3f060ff40090dd668affe24e9213833cce3b4",	"pos": "R"},
				{   "hash": "a2bad9a38314bb3c46cf221ae0ab46c5e83b26f556c10d5f435c79dfe491b656", "pos": "R"},
				{   "hash": "9f8a3f338eaad8d64db79d049951afb2fbab58d727fe67891acf5b09d66aeaa4",	"pos": "L"},
				{   "hash": "7133e791be45f25b4fcbc9d9ae209c97efc75ab3cc088efe40cb85a5c3b24991",	"pos": "L"},
				{   "hash": "bfe2577630cdb0d9e6948f82f4f973c8097c15ca93aa5f24b9be7706935b5a00",	"pos": "R"},
				{	"hash": "17277c2ccc02302729ca6300757011efa58340eefb957a8bd242c8f3fa17a8a3", "pos": "L"},
				{	"hash": "2a991de8f72a2b5c99c258d74ab2872a5712f508ca71c71933dece4ed90a39a5",	"pos": "L"},
				{    "hash": "dd31fc98dc3397c269c9cfc986ec2e75226af83e31cfe0efa428929a0d881f20","pos": "L"},
				{   "hash": "b7af0f37b29057689612f5064347ef4ea367b4364152306d310d6aa0bea27d78",	"pos": "L"},
				{	"hash": "181a10670ac0bc850bbdfbad6aac0a3652a7ed0e9494ac6a07fbaa86d929ad29",	"pos": "L"}
			]
		}
	]
}

</pre>
</div>
